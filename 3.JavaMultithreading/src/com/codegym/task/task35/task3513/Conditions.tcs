taskKey="com.codegym.task.task35.task3513.big17"\n\n2048 (17)


Congratulations on implementing your own version of the game 2048!

You implemented not only the basic functionality, but also the ability to undo the last move and automatically select the best move by
evaluating the fitness of a single move.

Possible improvements you could make include trying to increase the depth of your move fitness analysis and see
whether your algorithm can achieve the maximum possible score of 839,732 points.


Requirements:
1.	Congratulations! You did a great job!


2048 (part 16)


You're almost there! We have a way to determine the fitness of any move, and we can also compare
moves.

Let's implement an autoMove method in the Model class. It will choose and execute the best possible move.

Let's do the following:
1) Create a local PriorityQueue with capacity for four elements, passing in Collections.reverseOrder() (that way
the maximum element is always at the top of the queue).
2) Fill in PriorityQueue with four MoveFitness objects (one for each possible move).
3) Take the top element and execute associated move.

After implementing the autoMove method, add a call to this method in the Controller class's keyPressed method
in response to a press of the A key (code - KeyEvent.VK_A).

P.S. As an optional exercise, you can read about method references and try to use
the "::" operator to pass an argument to the getMoveFitness method. For the left method, you would use
getMoveFitness(this::left). Alternatively, you can use an anonymous class.



2048 (part 15)


To compare the fitness of different moves, we need to implement support for the Comparable interface
in the MoveFitness class.

In the compareTo method, compare the numbers of empty tiles (numberOfEmptyTiles) first. If the number of empty
tiles is equal, then compare the scores (score). If the scores are also equal, then we will consider the moves to be equally
fit and return zero.

Next we move to the Model class and implement two methods:
1) boolean hasBoardChanged - It returns true if the tile weights in the gameTiles array
differs from the tile weights in the topmost array of the previousStates stack. Note that we
must not remove the top element from the stack. Use the peek method.
2) MoveFitness getMoveFitness(Move move) - It has one Move parameter, and returns
a MoveFitness object that describes the fitness of the passed move. Here are some tips:
a) don't forget to call the rollback method to restore the correct game state;
b) if the move doesn't change the state of the game board, make the number of empty tiles and the score of the MoveFitness object
-1 and 0, respectively;
c) you can make a move by calling the move method on the object passed as an argument.



2048 (part 14)


A random move is certainly not bad, but it's much cooler to implement the ability to make smart moves. We won't get bogged down in neural networks.
To start, we'll focus on a fairly simple idea.

Obviously, a good move should eventually bring us closer to victory, namely, a tile with 2048.
I propose the following option for comparing the fitness of different moves:
1) Move 1 is better than Move 2 if it results in more empty tiles on the board
than Move 2.
2) Move 1 is better than Move 2 if it results in a higher total score than
Move 2.

To make this comparison, we can make a move, evaluate its fitness, and then
undo the move to return the game to its initial state. Applying this sequence of actions
to all four movement options, we can identify the best move and execute it.

Conceptually, we need two classes: one to describe the move, and another to describe its fitness.

Create a Move interface with one void move method. Annotate the interface with the @FunctionalInterface annotation type, which
indicates that there will be only one abstract method in this interface.

Create a MoveFitness class that describes the fitness of the move. It will need to have private int
numberOfEmptyTiles and scores fields, as well as a private Move move field.
The MoveFitness class needs a constructor with three parameters (int numberOfEmptyTiles, int score, Move move)
for initializing the fields, and a getter for the move field.



2048 (part 13)


Your progress is impressive! To change things up, I suggest giving the game the ability to
choose the next move on its own.

Let's start with the simple. In the Model class, implement a randomMove that randomly calls one of the movement
methods. You can implement this by calculating n = ((int) (Math.random () * 100)) % 4.
The resulting number will be a pseudorandom integer in the range [0..3]. You can associate each number in this range
with one of the methods left, right, up, or down.

Don't forget to add a call to the randomMove method in the Controller class's keyPressed method in response to a press of the R key
(code - KeyEvent.VK_R).

P.S. I'll leave you entirely responsible for checking the correctness of the randomMove method.
I'll only check for the presence of a call to the Math.random() method.



2048 (part 12)


Well, shall we try our algorithm in action? We still need to add logic to save the game state at the beginning of each
movement method, as well as another key processing case for undoing the last move.

When saving the current state to the stack, be sure that the current state is always saved
and only once. If you listened to my advice and used rotations and a call to the left method
to implement the right, up, and down method, you can use the following approach:
1) At the very beginning of the right, up, and down methods, call the saveState method with gameTiles as the argument.
2) In the left method, check whether the saveState method has already been called. We have the isSaveNeeded flag
for this. If it is true, we save the state. After performing
a left shift, we set the isSaveNeeded flag to true.

Also, make the Controller class's keyPressed method call the rollback method when the Z key (code KeyEvent.VK_Z) is pressed.



