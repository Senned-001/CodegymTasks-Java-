taskKey="com.codegym.task.task23.task2312.big18"\n\nSnake (part 18)


Great!
Start up Snake and enjoy it.


Requirements:
1.	Snake is ready!


Snake (part 17)


Now we'll finish the Snake class.

The snake consists of pieces. Each turn, let's just add one piece at the head,
and delete the last one. This will make the snake appear to slither.
You need to add the piece next to the current head (index 0).
The side you add it to depends on the direction (UP, DOWN, LEFT, RIGHT).
Hint:
a) How do you add a piece of the snake to the top of the sections list?
sections.add(0, new_section);
b) And how do you delete the last one?
sections.remove(sections.size()-1);

We need to implement the move(int dx, int dy) method:
a) check whether the snake slithered out of the room (if so, it dies)
b) check whether the new section coincides with any of the existing pieces of snake (if so, the snake dies)
c) add a new section to the snake (to the head) and remove the last piece from its tail.
d) if the mouse's coordinates match the coordinates of the snake's head, call the eatMouse method on the Room class's static game object.
e) if the snake catches the mouse (the coordinates of the snake's head match the coordinates of the mouse), then you don't need to remove a piece from the tail.



Snake (part 16)


Nothing is forever... That's why the snake must die if it hits a wall or itself.

There's a very simple check to determine whether a snake intersects itself:
does the sections list contain a "new snake's head"?
This is what the code will look like:
if (sections.contains(head))
The head must not be added to the sections list, otherwise this condition will always be true.
But for this code to work, you need to implement object comparison methods (equals and hashCode) in the SnakeSection class.

Hint:
Use Alt+Insert in IntelliJ IDEA to automatically generate equals and hashCode methods.

Task:
a) implement equals and hashCode methods in the SnakeSection class.
b) implement the checkBorders(SnakeSection head) method: if the snake's head is outside the room, the snake dies (isAlive = false)
c) implement the checkBody(SnakeSection head) method: if the snake's head intersects its body, the snake dies (isAlive = false)




Snake (part 15)


Now we need to finish the snake.

Here's my suggestion regarding the snake's motion:
The snake consists of pieces. Each turn, let's just add one piece at the head,
and delete the last one. This will make the snake appear to slither.

Let's add two move methods: one without parameters, and the other with two int parameters.

In the move method without parameters, you must:
a) stop moving if the snake died (isAlive == false)
b) call move(0, -1) if the direction of movement is SnakeDirection.UP
c) call move(1, 0) if the direction of movement is SnakeDirection.RIGHT
d) call move(0, 1) if the direction of movement is SnakeDirection.DOWN
e) call move(-1, 0) if the direction of movement is SnakeDirection.LEFT

We'll leave the move method with (int, int) parameters empty for now.



Snake (part 14)


Now let's work on the print() method.

Here's what we need:
a) display a rectangle of dots, whose dimensions is width x height.
b) represent the body of the snake with an "x"
c) draw the snake's head with an "X".

Hint:
a) it will be helpful to start by creating an int[][] matrix whose dimensions are height x width
b) then walk through all the objects and "draw them" onto the matrix.
For example, you could use 1 for the body of the snake, 2 for the head of the snake, and 3 for the mouse.



Snake (part 13)


This time I'll invite you to write a special sleep() method that will pause
depending on the length of the snake (the number of elements in sections).
Think of some slick algorithm. Make the delay 500 milliseconds on the first level,
and gradually drop it to 300 by Level 11. And to 200 by Level 15. And then have it stay constant.



