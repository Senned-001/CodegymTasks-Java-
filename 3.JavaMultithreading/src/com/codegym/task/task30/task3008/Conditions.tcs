taskKey="com.codegym.task.task30.task3008.big17"\n\nChat (part 17)


The last, but most important, method of the SocketThread class is the void run() method. Add it.
Given the methods we've already created, implementing this method looks very simple.

Let's do it:
1) Request the server address and server port using the getServerAddress() and getServerPort() methods.
2) Create a new java.net.Socket object using the data obtained in previous step.
3) Create a Connection object using the socket from step 17.2.
4) Call the method that implements the client-server "handshake" (clientHandshake()).
5) Call the method that implements the main loop for processing server messages.
6) If an IOException or ClassNotFoundException is thrown, notify the main thread
using notifyConnectionStatusChanged() and false as the argument.

The client is ready. You can start the server and several clients, and check how everything works.


Requirements:
1.	The run() method should establish the server connection and save it in the connection field (use the getServerAddress() and getServerPort() methods to get the server address and server port).
2.	The run() method must call the clientHandshake() method.
3.	The run() method must call the clientMainLoop() method.
4.	If an IOException or ClassNotFoundException occurs in the run() method, the notifyConnectionStatusChanged() method must be called with false as the argument.
5.	The run() method&#39;s signature must match the task conditions.


Chat (part 16)


Now everything is ready for us to add the necessary methods to the SocketThread class.

1) Add a protected clientHandshake() throws IOException, ClassNotFoundException method.
This method will represent the client to the server. It must:
a) In a loop, use the connection field to receive messages.
b) If a received message is a NAME_REQUEST (the server has requested a name),
use the getUserName method to ask the user to enter a username, create a new message
that is a MessageType.USER_NAME and contains the entered name, and send the message to the server.
c) If a received message is a MessageType.NAME_ACCEPTED (the server has accepted the name), it means
the server has accepted the client name, and you need to inform the main thread, which is eagerly waiting for this news.
Do this by passing true to the notifyConnectionStatusChanged() method. Then exit the method.
d) If there is a message of any other type, throw an IOException("Unexpected MessageType").

2) Add a protected void clientMainLoop() throws IOException, ClassNotFoundException method.
This method will implement the server's main message-processing loop.
Inside the method:
a) Use the connection field to receive a message from the server.
b) If it is a text message (MessageType.TEXT), process it using the processIncomingMessage() method.
c) If the message is a MessageType.USER_ADDED, process it using the informAboutAddingNewUser() method.
d) If the message is a MessageType.USER_REMOVED, process it using the informAboutDeletingNewUser() method.
e) If the client receives a message of some other type, throw an IOException("Unexpected MessageType").
f) Put the code from the previous steps in an infinite loop. The loop will terminate automatically
if an error (exception) occurs or the thread on which the loop is running is interrupted.



Chat (part 15)


Let's write the implementation of the SocketThread class. We'll start with simple helper methods.

Add methods that will be available to subclasses but not accessible to other
classes outside the package:
1) void processIncomingMessage(String message) - It should display the message on the console.
2) void informAboutAddingNewUser(String userName) - It should display a message
indicating that a participant named userName has joined the chat.
3) void informAboutDeletingNewUser(String userName) - It should display a message
indicating that the participant named userName has left the chat.
4) void notifyConnectionStatusChanged(boolean clientConnected) - This method
must:
a) Set the external Client object's clientConnected field equal to the passed argument.
b) Notify (wake) the Client class's waiting main stream. Hint:
use synchronization at the level of the current instance of the outer class and use the notify() method.
The SocketThread class's outer class is the Client class.



Chat (part 14)


Let's start writing the main functionality of the Client class.

1) Add a public void run() method. It should create a helper
SocketThread, wait until it establishes a connection with the server, and then
in a loop, read messages from the console and send them to the server. The loop will terminate
either when the client shuts down or the user enters the 'exit' command'.
To inform the main thread that the connection is established on the
helper thread, use the Client object's wait() and notify() methods.

The implementation should:
a) Create a new socket thread using the getSocketThread() method.
b) Mark the created thread as a daemon. This is necessary so that the
helper thread is automatically interrupted when the program exits.
c) Start the helper thread.
d) Make the current thread wait until it receives a notification from another
thread. Hint: use wait() and object level synchronization. If an
exception occurs while waiting, notify the user and exit
the program.
d) Once the thread receives a notification, check the value of
clientConnected. If it is true, display "Connection established. To exit,
enter 'exit'.". If it is false, display "An error occurred while
working with the client.".
e) Read messages from the console until the client is connected. If 'exit' is entered,
then exit the loop.
g) After each string is read, if the shouldSendTextFromConsole() method
returns true, send the text using the sendTextMessage() method.

2) Add the public static void main(String[] args) method. It must create a new Client object and
call its run() method.



Chat (part 13)


Let's continue to implement helper methods in the Client class.

Add the followings methods, which will be available to subclasses,
but not to other classes outside the package:
1) String getServerAddress() - It should ask the user to enter the server address,
and return the entered value. The address can be a string containing
an IP address if the client and server are running on different machines or 'localhost' if the client and
server are running on the same machine.
2) int getServerPort() - It should ask the user to enter the server port, and then return it.
3) String getUserName() - It should ask for and return the username.
4) boolean shouldSendTextFromConsole() - In this implementation of the client, it
should always return true (we always send the text entered from the console). This
method can be overridden if we write another
client that inherits ours and shouldn't send the text entered
from the console.
5) SocketThread getSocketThread() - It should create and return a new
SocketThread object.
6) void sendTextMessage(String text) - It creates a new text message,
using the connection field to send the passed text to the server.
If an IOException occurs while the text is sent, you need to display
information about this user and assign false to the clientConnected field.



Chat (part 12)


Let's start writing the client. When the client starts running, it should request the server address and server port,
connect to the specified address, receive a name request from the server, ask the user for his or her name,
send the username to the server, and wait for the server to accept the name.
After that, the client can exchange text messages with the server.
Messages will be exchanged on two threads running in parallel.
One will read from the console and send what is read to the server, and the second thread will receive data
from the server and display it on the console.

Let's start the client implementation:
1) Create a client package. From now on, create all classes responsible for the client implementation in this package.
2) Create a Client class.
3) In the Client class, create a nested SocketThread class that inherits the Thread
class. It will be responsible for the thread that establishes the socket connection and
reads server messages. The class must have a public access modifier.
4) Create a Connection connection field in the Client class. Use an access modifier that will allow access
to this field from subclasses, but will prevent calls from classes outside the package.
5) Add a private boolean clientConnected field to the Client class. Initialize it to false.
It will subsequently be set to true if the client connected to the server, or false otherwise.
When declaring this field, use a keyword that will ensure that every thread using the clientConnected field
will be working with the current value, not a cached value.



