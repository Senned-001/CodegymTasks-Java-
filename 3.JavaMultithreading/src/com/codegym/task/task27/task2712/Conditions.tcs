taskKey="com.codegym.task.task27.task2712.big10"\n\nRestaurant (part 10)


Recursion is used when the algorithm for solving the problem is the same as the algorithm for solving part of the problem.
That's just what we have. We need to do a full search of all options and choose the best of them.

Let me remind you of the pattern used to write recursive code:
a) condition for terminating the recursion
b) condition for continuing the recursion (recursive call with a set of parameters from the previous step).
You can always find detailed information online about how to write recursion.

Our current task is to provide a recursive implementation of item 2.2 of the previous task:
(choose a list of available videos that maximizes revenues)
The recursive method must chose the set of commercials that will be displayed to the customer.

This set must meet the following requirements:
1) the amount of money received from impressions should be the maximum of all possible options
2) the total commercial playback time must NOT exceed the cooking time for the current order;
3) a video is shown no more than once for any given order;
4) if several different sets of videos will produce the same amount of money from impressions, then:
4.1) choose the option that maximizes the total time;
4.2) if the total time is the same for multiple such options, then select the option with the smallest number of videos;
5) the number of remaining impressions of any commercial in the set must be positive.

And don't forget to implement item 2.4 of the previous task (display all the relevant videos).

The revalidate() method must be called for each video shown.


Requirements:
1.	The amount of money received from impressions should be the maximum of all possible options.
2.	The total commercial playback time must NOT exceed the cooking time for the current order.
3.	A video should be shown no more than once for any given order.
4.	If there are several different sets of videos that will produce the same amount of money from impressions, then the option with the maximum total time should be selected.
5.	If there are several different sets of videos that will produce the same amount of money and have the same total time, then the option with the minimum number of videos should be chosen.
6.	The set should include only videos with a positive number of remaining impressions.
7.	The revalidate() method must be called for each video shown.


Restaurant (part 9)


We need an exception that will help us handle the situation where we are unable to choose commercials.

1. Create an unchecked NoVideoAvailableException in the ad package.

2. Let's take a closer look at the void processVideos() method in AdvertisementManager.
2.1. Remove the code that displays "calling the processVideos method"
The method should:
2.2. Choose a list of available videos that maximizes revenues. (Don't do this yet—we'll do it later).
2.3. If there are no advertising videos that can be shown to the customer, then throw a NoVideoAvailableException,
which you will need to catch (think about where the best place to do this would be), and log the following phrase with logging level Level.INFO
"No video is available for the following order: " + order
2.4. Display all the chosen commercials in order of decreasing cost per impression
in cents. The secondary sort order is by increasing the cost per impression per second of commercial in thousandths of a cent
Use the Collections.sort method
(Again, don't do this yet—we'll do it later).
Example for [Water]:
Displaying First Video... 50, 277
where "First Video" is the name of the commercial
where 50 is the cost per impression in cents
where 277 is the cost per impression per second of commercial in thousandths of a cent (equal to 0.277 cents)
Use the methods of the Advertisement class.
2.5. In the Advertisement class, create a void revalidate() method. This method should:
2.5.1. Throw an UnsupportedOperationException if the number of impressions is not positive.
2.5.2. Decrement the number of remaining impressions.



Restaurant (part 8)


It's time to describe the functionality of the AdvertisementManager class.
But first we're going to need some methods in the Advertisement class.

1. Create a long amountPerImpression field in the Advertisement class.
It should equal the cost of one ad impression in cents (amountPaid / impressionsRemaining).
Assign a value to the field in the constructor.

2. In the Advertisement class, create getters for the name, duration, and amountPerImpression fields.

3. Determine what data the AdvertisementManager object needs, i.e. the time required for the cook to prepare an order.
Because we're storing the duration of the videos in seconds, we'll also take the cooking time in seconds.
In the AdvertisementManager class, create a constructor that has one parameter: int timeSeconds.
Create a corresponding field and save this value in it.

4. AdvertisementManager performs just one action—it processes ad videos.
Therefore, create the only public method: void processVideos(). Its functionality will be described in the next task.
But for now, display "calling the processVideos method"

5. To test this functionality, you need to add a call to the processVideos method to the AdvertisementManager.
Obviously, this method should be called during creation of an order, or more precisely—in parallel with the creation of an order.
The order is prepared while the video is watched.
Add a call to the processVideos() method in the right place.

P.S. Don't forget that an order's preparation time is recorded in minutes, but the time of an ad impression in measured in seconds!



Restaurant (part 7)


When choosing which class to start from, try to find one that is used by others, and which does not use anything.
In our case, this is the repository of advertising videos (AdvertisementStorage).
We decided that it would be the only one in the restaurant and made it a singleton.
Let's describe it.

1. The videos need to be stored somewhere. Let's make it a list.
Create a videos field and initialize it with an empty list.
Think about whether the videos field should be able to change its value?

2. To make it possible to work with the videos, create the following public methods:
2.1. list() - returns a list of all available videos.
2.2. add(Advertisement advertisement) - adds a new video to the videos list.

3. In the class constructor, let's add some data to the videos list. This is what I have:
Object someContent = new Object();
new Advertisement(someContent, "First Video", 5000, 100, 3 * 60) // 3 min
new Advertisement(someContent, "Second Video", 100, 10, 15 * 60) // 15 min
new Advertisement(someContent, "Third Video", 400, 2, 10 * 60)   // 10 min

4. In the AdvertisementManager class, we'll create a final field that references an instance of AdvertisementStorage and call it storage.
Don't forget to initialize this field!



Restaurant (part 6)


An order is created, prepared by the cook, and then carried out to the guest. We also calculate the time required to fill the order.
We'll consider the first part of the task complete.
Let's move on to the second: while the order is being prepared, ads should be shown on the tablet.
Let's define what we mean by ads.

For us, an ad is a video of a certain duration. We also know that someone has paid for a number of impressions.
We'll assume that we know the number of paid impressions, the total cost of all impressions, and the ad itself.

1. Create an ad package for ad-related functionality.

2. In the ad package, create an Advertisement class that has the following fields:
Object content - the video
String name - the name or title
long amountPaid - the amount paid for ads in cents. Use a long to avoid rounding problems
int impressionsRemaining - the number of impressions that have been paid for but not shown
int duration - the duration in seconds
Set the access modifiers on your own.

3. In the Advertisement class, create a constructor with parameters ordered according to the sequence of fields listed above

4. We'll create another two classes in the same package:
AdvertisementStorage - a repository of commercials.
AdvertisementManager - each tablet will have its own manager object
that will select and sequence the optimal set of videos for each order.
It will also interact with the player and display the videos.

5. Since there is only one AdvertisementStorage for the entire restaurant, we'll make it a singleton.



Restaurant (part 5)


The cook currently prepares dishes instantaneously. In reality, cooking takes some time.
We need to calculate the time required to prepare the entire order, so we can then select commercials to fill the time.

1. Suppose we know the cooking time for each dish in minutes. We'll hardcode it in the Dish class.
1.1. Change the creation of the enum fields: Fish(25), Steak(30), Soup(15), Juice(5), Water(3);
1.2. Create a private int duration field with a getter.
To create a getter, press Alt+Insert and select Getter. Next, select the field name and click OK (Enter).

2. Add the ability to calculate the time required to prepare the whole order.
Where should you add it???
2.1. If you add it to the Cook class, then the cook will be able to calculate how long it will take to prepare the order.
For other classes to get this information, they will need access the Cook object.
2.2. If you add it to the Order class, then access to the order will always let you find out how long the order will take.
2.3. Choose the right place from either item 2.1 or item 2.2, and add a public int getTotalCookingTime() method,
which will calculate the total time required to prepare all the dishes in the order.
2.4. Let's add this information to what our cook outputs to the console. Now let's display a message like this:
Start cooking - Your order: [Soup, Juice, Water] from Tablet{number=5}, cooking time 23 min

Let's make it pretty:
3. Start the application and immediately enter 'exit'. The output isn't very beautiful.
Make it so that if there are no dishes in the order, then it doesn't get sent to the cook. Find this relevant place and implement the logic.
In the Order class, create a public boolean isEmpty() helper method that determines whether there are any dishes in the order.



