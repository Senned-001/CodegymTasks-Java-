taskKey="com.codegym.task.task27.task2712.big23"\n\nRestaurant (part 23)


That's it! You can make it beautiful on your own.

For example:
1. Threads usually use the ThreadLocalRandom class instead of Random. Refactor the code: replace Random with ThreadLocalRandom.
2. Make Waiter a task so that it works like a thread (remove Observer). Make a queue of prepared orders. Have the waiter take orders from it and carry them out to the tables.
3. Write a NoVideosAvailableEventDataRow event in the event log when it is not possible to select a video. Pass this event to the manager.
4. Write a UI, for example, using Swing.

Here's what you have achieved:
1. You figured out the Observer pattern.
2. You beefed up your ability to use recursion.
3. You got acquainted with a way to implement statistics.
4. You know more and can do more.
5. You saw how to break a task into subtasks.
6. You moved one step closer to working as a Java programmer.

Congratulations!


Requirements:
1.	You did a great job. You finished a big task!


Restaurant (part 22)


Unfortunately, the orders are still not being prepared in parallel. Here's how our thread from the previous task works.
It finds a cook, finds an order, gives the order to the cook using the startCookingOrder method, waits for the order to be prepared,
and only then moves on to the next order. This is because all the actions are performed consecutively on a single thread.
We can't perform actions in parallel on the same thread.
We need a standard Producer-Consumer implementation.
RandomOrderGeneratorTask is our Producer, because it makes orders.
Cook is the Consumer, because it processes orders.

1. Move the queue from OrderManager to Restaurant, and make it a private constant.
2. Add a queue field and setter to the Cook class. Immediately after creating a cook, use the created setter to set
the created field equal to the constant from item 1.
3. Tablet should not be an Observable. Remove all the dependencies.
4. In Tablet, create a setter and set a reference to the queue (item 1) a tablet is created.
5. In Tablet, replace the logic that notifies the Observer with logic that adds the order to the queue.

6. In the method main, create and run threads based on Cook tasks.
7. Remove the cooks set, its getter, and the register(Cook cook) method from the StatisticsManager class.
8. Make the Cook class a task (Runnable). Move the logic from the thread in the OrderManager constructor to the Cook class's run method.
9. Remove the OrderManager class and fix the Observer-Observable relationship in the main method.



Restaurant (part 21)


We continue to fix the bug.

Now all the orders arrive in the queue, but they don't reach the cooks.
We'll make OrderManager find any available cook and give it an order. To implement this logic,
we need a deamon thread. It will check for orders in the queue, and then grab available cooks and give them orders.

We're going to need a method that determines whether a cook is busy.
1. In the Cook class, create a boolean busy field with a getter.
2. At the beginning of the startCookingOrder method, set busy to true; and at the end of the method, set it to false.
3. In the startCookingOrder method, simulate the delay resulting from preparing a dish: sleep for 10 times the order's required preparation time.
In other words, if an order takes 30 minutes to prepare, then the delay will be 30 * 10 milliseconds.
4. To get a list of all the cooks, in the StatisticsManager class, add a getter for the field that is populated in the register(Cook cook) method.

5. In the OrderManager constructor, create and run a daemon thread. Here's the logic of the run method:
check the queue every 10 milliseconds. If the queue has orders, then look for available cooks and pass
them the orders (startCookingOrder method). If there are no available cooks or there are no orders in the queue, then keep waiting.



Restaurant (part 20)


Fix a bug: a tablet sends its orders to all known chefs.
Expected behavior: a tablet sends its orders to a queue, and an available cook takes orders from the queue.

There are two ways to implement this functionality:
1) Each tablet stores a reference to the queue and pushes new orders to it.
2) A tablet pushes its orders to the Observer, which stores a reference to the queue. The Observer puts the order into the queue.

We'll take the second option.
1. In the root of the project, create an OrderManager class that will be an Observer for the tablets.
2. In the OrderManager class, create a LinkedBlockingQueue<Order> orderQueue field. Add to it all orders passed to the update method.
3. The Cook class is now NOT an Observer.
4. In the Cook class, create a void startCookingOrder(Order order) method. Move the update method's logic into this method.
5. Remove the update method from the Cook class.
6. In the main method, arrange an Observer-Observable relationship in view of the changes above.



Restaurant (part 19)


We need to rework the main method.

First, let's make the parameters of our RandomOrderGeneratorTask constructors consistent.
Please make your method signature the same as mine:
public RandomOrderGeneratorTask(List<Tablet> tablets, int interval)

In the main method:
1. Remove the creation of the hardcoded tablet and call the createOrder() method.
2. Create a second cook.
3. Register the cooks using the StatisticsManager class.
4. Arrange Observer/Observable classes for the second cook and all the tablets.
5. Create a list of 5 tablet objects. Initialize it in a loop.
6. Create and run a thread based on a RandomOrderGeneratorTask object.
7. After a second, interrupt it and look at the console output.

Oops, two cooks are preparing the same order! 8-O

We got this output because the Observable is informing all of its Observers, i.e. a tablet sends its order to all known cooks.
This isn't the behavior we want, so we will correct it in the next task.

P.S. Don't forget to stop the thread!



Restaurant (part 18)


Currently, we have one tablet and 1 cook.
Let's create several tablets that will randomly generate orders, and we'll make two cooks.

1. In the Restaurant class, create a constant PRIVATE static int ORDER_CREATION_INTERVAL = 100.

2. In a separate file, create a (Runnable) RandomOrderGeneratorTask class. This task should:
2.1. Maintain a list of all the tablets
2.2. Use Math.random to select a random tablet.
2.3. RandomOrderGeneratorTask should have only one method.
2.4. Generate a random order every ORDER_CREATION_INTERVAL milliseconds for the tablet in item 2.2 (don't display a stack trace)
Now an order is created in the Tablet class's createOrder method.
In the Tablet class, create a void createTestOrder() method with similar functionality
that will randomly generate an order with random dishes without communicating with a real person.
Pass all the necessary data to in the constructor.
Hint:
a) create a TestOrder class (descendant of Order) in the parent's package.
b) in the Order class, create a protected initDishes() method that initializes the dishes. Call this method in the constructor
c) in the Order class, make the dishes field protected
d) override initDishes in the TestOrder class. Initialize the order with a random set of dishes.
e) instead of creating an Order object in the Tablet class's createTestOrder() method, create a TestOrder object.
All of the createTestOrder method's other functionality remains the same

3. Refactor the createTestOrder() and createOrder() methods: in one of the methods, select the code that is repeated in both methods,
press Ctrl+Alt+M, enter any name for the method, and click OK. IDEA will offer to replace the code in the second method. Confirm the action.



