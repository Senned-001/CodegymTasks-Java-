taskKey="com.codegym.games.spaceinvaders.part21"\n\nSpace Invaders (Part 21/34)

The game ends when the player wins or loses. Let's implement the stopGame method, which will stop the game and display an appropriate message on the screen.
You decide on the exact wording of the messages about winning and losing. If a projectile hits a player, the explosion animation must be displayed before the game
is stopped. To do this, in the stopGameWithDelay method, we'll call the stopGame method with a delay.
In the check method, if the player is "dead", you need to call stopGameWithDelay to start a countdown to when the game will stop.


Requirements:
1.	The SpaceInvadersGame class must have a private boolean isGameStopped field.
2.	The isGameStopped field must be initialized to false in the createGame() method before the call to the drawScene() method.
3.	The SpaceInvadersGame class must have a private int animationsCount field.
4.	The animationsCount field must be initialized to 0 in the createGame() method before the call to the drawScene() method.
5.	The SpaceInvadersGame class must have a private void stopGame(boolean isWin) method.
6.	The stopGame(boolean isWin) method must set the isGameStopped field to true.
7.	In the stopGame(boolean isWin) method, you need to call the stopTurnTimer() method.
8.	In the stopGame(boolean isWin) method, you need to call the showMessageDialog(Color, String, Color, int) method if isWin is true. Pass Color.GREEN as the text color.
9.	In the stopGame(boolean isWin) method, you need to call the showMessageDialog(Color, String, Color, int) method if isWin is false. Pass Color.RED as the text color.
10.	The SpaceInvadersGame class must have a private void stopGameWithDelay() method.
11.	The stopGameWithDelay() method must increase the animationsCount field by one.
12.	In the stopGameWithDelay() method, you need to call the stopGame(boolean) method with playerShip.isAlive as the argument if the animationsCount field is greater than or equal to 10.
13.	In the SpaceInvadersGame class&#39;s check() method, you need to call the stopGameWithDelay() method if the player&#39;s ship is NOT alive.


Space Invaders (Part 20/34)

We'll create the nextFrame method in the Ship class to switch to the next animation frame.
It sets the matrix field to the next animation frame, if possible.
We'll extend the functionality of the draw method by overriding it so that it calls the superclass's method
for drawing and the nextFrame method for changing animation frames.



Space Invaders (Part 19/34)

We'll implement logic to "kill" the player by overriding the kill() method. In addition to setting the isAlive flag to false,
it will add an animation of the ship's destruction.



Space Invaders (Part 18/34)

At this stage, we'll prepare an animation for when a ship explodes. To do this, we need a List<int[][]> frames field,
which will store a list of matrices representing the animation frames.
We'll also need a frameIndex field that stores the index of the current animation frame.
We'll set the animation frames in the setAnimatedView method. It takes an array of frames (matrices) and puts them in the frames list.
Finally, we'll implement the setStaticView method, which sets the ship's initial matrix.



Space Invaders (Part 17/34)

We'll give the PlayerShip class a method that checks whether enemy projectiles have hit the player's ship (the isCollision() method in the GameObject class).
If there is a hit, it will "kill" the ship and the projectile. We'll also add the player's ship to the class.
We'll draw it and add the collision check in the appropriate method.



Space Invaders (Part 16/34)

Now we'll create the player's ship. We need the PlayerShip class for this. Its constructor will set the ship's coordinates so that
the ship is displayed centered at the bottom of the screen. The constructor sets the ship's appearance by setting the PLAYER matrix,
which we've provided for you in the ShapeMatrix class. A ship can have two states: "alive" or "dead". To represent these states,
we'll add an isAlive field to the Ship parent class. When a projectile hits a ship, they (the projectile and the ship) are destroyed,
so we'll add a kill method. When it is called, we'll "kill" the ship and the projectile.



