taskKey="com.codegym.games.spaceinvaders.part25"\n\nSpace Invaders (Part 25/34)

Now we'll prepare to give the player the ability to shoot. For this, we need a fire() method that will create projectiles.
We will store them in the playerBullets list. Add logic to draw projectiles in the drawScene method, and to move them â€” in the moveSpaceObjects method.
Now all that remains is to implement the ability to shoot using key presses. We'll work on this in the next part of the project.


Requirements:
1.	In the PlayerShip class, the fire() method of the Ship parent class must be overridden.
2.	The fire() method must return null if the player&#39;s ship is &quot;dead&quot;.
3.	The fire() method must return a new Bullet object. You need to call the Bullet class&#39;s constructor with the following arguments: x + 2, y - ShapeMatrix.BULLET.length, Direction.UP.
4.	The SpaceInvadersGame class must have a private List&lt;Bullet&gt; playerBullets field.
5.	In the createGame() method, the playerBullets field must be initialized with a new ArrayList&lt;Bullet&gt; object before the call to the drawScene() method.
6.	In the drawScene() method, the draw(Game) method must be called on each object in the playerBullets list after the call to the drawField() method. Pass &quot;this&quot; to the method.
7.	The moveSpaceObjects() method must call the move() method on each object in the playerBullets list.


Space Invaders (Part 24/34)

When you release the left key or the right key, the ship does not stop moving until it hits the edge of the playing field. Let's fix that.
We'll override the Game class's onKeyReleased() method. This method is called when keys are released.
If the player's ship is moving, the onKeyReleased(Key) method changes the player's direction to Direction.UP and, as a result, the ship stops moving.



Space Invaders (Part 23/34)

In this part of the project, we'll move the player's ship. Keep in mind that the ship must not leave the playing field.
To move the ship with the other objects, you need to call the move() method in the moveSpaceObjects() method of the game's main class.



Space Invaders (Part 22/34)

Let's add a new property to the player's ship: direction. We'll set it through a setter method. The ship can move in two directions: left or right.
But it can also hold still, so we'll use "up" to represent this state. The ship isn't moving when the game starts,
so we'll set the ship's default direction to "up". To read the player's commands (key presses), we'll override the Game parent class's
onKeyPress(Key) method. When the player presses left or right, this method will set the corresponding direction on the ship.
We'll also implement the ability to restart a stopped game by pressing the SPACE key.



Space Invaders (Part 21/34)

The game ends when the player wins or loses. Let's implement the stopGame method, which will stop the game and display an appropriate message on the screen.
You decide on the exact wording of the messages about winning and losing. If a projectile hits a player, the explosion animation must be displayed before the game
is stopped. To do this, in the stopGameWithDelay method, we'll call the stopGame method with a delay.
In the check method, if the player is "dead", you need to call stopGameWithDelay to start a countdown to when the game will stop.



Space Invaders (Part 20/34)

We'll create the nextFrame method in the Ship class to switch to the next animation frame.
It sets the matrix field to the next animation frame, if possible.
We'll extend the functionality of the draw method by overriding it so that it calls the superclass's method
for drawing and the nextFrame method for changing animation frames.



