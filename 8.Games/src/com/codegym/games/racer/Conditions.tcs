taskKey="com.codegym.games.racer.part05"\n\nRacer (Part 5/28)

Create a GameObject class to represent game objects. All game objects will have the following common properties:
- int x, int y — coordinates of the object's upper left corner on the playing field;
- int[][] matrix — matrix for displaying the game object. The matrix values are the ordinals of the colors in the Color enum.
To get the color, use Color.values()[matrix[i][j]], where:
i is the y coordinate in the matrix,
j is the x coordinate in the matrix.
- int height, int width — The height and width match the dimensions of the matrix.
An object must also have a method that draws it.


Requirements:
1.	There must be a public GameObject class in a separate file.
2.	The GameObject class must have a public int x field.
3.	The GameObject class must have a public int y field.
4.	The GameObject class must have a public int[][] matrix field.
5.	The GameObject class must have a public int width field.
6.	The GameObject class must have a public int height field.
7.	The GameObject class must have a public constructor with three parameters (int, int, int[][]). It must use the parameters to set the x and y fields and the matrix field.
8.	In the GameObject&#39;s constructor, the width field must be initialized to the value matrix[0].length, where matrix is the constructor&#39;s last parameter.
9.	In the GameObject&#39;s constructor, the height field must be initialized to the value matrix.length, where matrix is the constructor&#39;s last parameter.
10.	The GameObject class must have a public void draw(Game) method.
11.	The draw(Game) method must call the setCellColor(int, int, Color) method on the Game object for each cell of the matrix. The following arguments must be passed: the object&#39;s x + x in the matrix, the object&#39;s y + y in the matrix, color.
12.	The GameObject class must have a statement that imports the entire contents of the com.codegym.engine.cell package.


Racer (Part 4/28)

During the game, many objects will appear, move about the playing field, and sometimes leave it.
If the setCellColor(int, int, Color) method is called with coordinates outside the bounds of the playing field, an exception
will be thrown. To avoid this, override it so that the superclass's method is only called with coordinates that lie within the playing field.
Hint: to call the superclass's method, use the super keyword.



Racer (Part 3/28)

Let's proceed to drawing the race track in the drawField() method.
To set the color of a specific cell, use the setCellColor(int, int, Color) method. The passed arguments are the x and y coordinates and the color.
Keep in mind that the playing field consists of three zones that must be painted using different colors:
1. The shoulder is the side of the playing field, where things don't move.
Height: the entire height of the playing field;
Width: from 0 to ROADSIDE_WIDTH (not inclusive) and from WIDTH - ROADSIDE_WIDTH (inclusive) to WIDTH.
2. The road is the roadway where cars move.
Height: the entire height of the playing field;
Width: from ROADSIDE_WIDTH (inclusive) to WIDTH - ROADSIDE_WIDTH (not inclusive), excluding CENTER_X.
3. The dividing line is a white stripe that divides lanes.
Height: the entire height of the playing field;
Width: 1 cell of the playing field, where x = CENTER_X.
The painting happens in a loop:
The result should be a race track that looks something like this:
api/1.0/rest/images/78/39ad56b3-2702-4b6f-8a84-ee937b8a0433?size=0
P.S. You can choose whatever colors you like.



Racer (Part 2/28)

Now we'll prepare the playing field.
In this part, we'll create variables and methods that we'll use in the future to draw the road and road markings.
A dividing line will be placed in the middle of the road. The value of its x coordinate will be half of
the width of the playing field and will be stored in the CENTER_X variable.
Shoulders will be placed along the sides of the road. They will be 14 cells wide.
This value will be stored in the ROADSIDE_WIDTH variable.

We'll create helper methods:
createGame() - for starting a new game;
drawScene() - for drawing all the game objects;
drawField() - for drawing the playing field's background.



Racer (Part 1/28)

We invite you to write an exciting game — Racer. We'll start with the rules.
1. The objective of the game is to reach the finish line by driving a race car on a busy race track.
2. The score depends on how long the race lasts: the sooner a player finishes, the higher his or her score.
3. The game is over when the player hits another car or an obstacle.

Let's create the game's main class: RacerGame. To make use of the game engine, we'll make our class inherit the Game
class, which has methods for implementing the game. To start, we need a playing field (64x64) to which we'll add game objects.
Because the field's width and height will be used often in the game logic, it makes sense to create WIDTH and HEIGHT constants.
Before the game starts, the initialize() method runs. Its purpose is to set up the game's initial state. You need to override it in the RacerGame class.

In the initialize() method, you need to:
1. set the dimensions of the playing field by calling setScreenSize(WIDTH, HEIGHT);
2. disable display of the grid by calling showGrid(false).
To complete the Racer task successfully, we recommend that you read this article about the "Games" section. It contains information that you'll find helpful when writing games.


