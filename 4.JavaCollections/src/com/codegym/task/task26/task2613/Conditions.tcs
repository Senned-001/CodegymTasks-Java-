taskKey="com.codegym.task.task26.task2613.big15"\n\nCashMachine (part 15)


1. In CashMachine, create a constant for the path to the resources.
public static final String RESOURCE_PATH;
Refactor the loading of all the ResourceBundles to use RESOURCE_PATH.

2. The CashMachine class should have no initialization of ResourceBundles.
Move the message about exiting from CashMachine into ConsoleHelper. Call the method "printExitMessage".

3. That's it! You can make it beautiful on your own. But we won't test you on this.
For example:
3.1. Fix the displayed texts.
3.2. Add resources for multiple locales. For example, add support for Russian.
3.3. Validate the input denominations.

Here's what you have achieved:
1. You figured out the Command pattern.
2. You made friends with a greedy algorithm.
3. You got acquainted with localization.
4. You know more and can do more.
5. You saw how to break a task into subtasks.
6. You moved one step closer to working as a Java programmer.
7. You solved one of the test tasks that are given at interviews. But shhhhh! Don't tell anyone :).
If you're ever given this task, don't copy this solution. Instead, make your own by analogy.

Congratulations!


Requirements:
1.	The CashMachine class must have a public static final String RESOURCE_PATH field.
2.	The ConsoleHelper class must have a public static void printExitMessage() method.
3.	Congratulations! That&#39;s all for this level!


CashMachine (part 14)


1. In LoginCommand and WithdrawCommand, add a private ResourceBundle res field and initialize it with the appropriate resource.
For LoginCommand, use login_en.properties.
For WithdrawCommand, use withdraw_en.properties.

2. Use common_en.properties to replace all the strings in ConsoleHelper.
To do this, create a private static ResourceBundle res field in the ConsoleHelper class and initialize it with the appropriate resource.
Important: build the path to the resources dynamically using the CashMachine class's getPackage() method.




CashMachine (part 13)


You've already figured out ResourceBundle! Cool!
Now we can add localization, i.e. support for multiple languages.

1. In DepositCommand, ExitCommand, and InfoCommand, add a private ResourceBundle res field and initialize it with the appropriate resource.
For DepositCommand, use deposit_en.properties.
For ExitCommand, use exit_en.properties.
For InfoCommand, use info_en.properties.
Important: build the path to the resources dynamically using the CashMachine class's getPackage() method
2. For each new resource, replace all the strings in the corresponding command.



CashMachine (part 12)


In part 11, we hardcoded the credit card number and PIN code used to allow working with our ATM.
But we could have lots of users. We certainly won't hardcode them all! If we need to add another user,
we would have to redeploy our application. There is a solution to this problem.

Note that a new resources package has been added. We'll store our resource files in it.
This package has the verifiedCards.properties file, where card numbers and PIN codes are specified.

1. Add a private ResourceBundle validCreditCards field to LoginCommand.
In the declaration, initialize this field with the data from the verifiedCards.properties file.
Read online to find out how this is done for a ResourceBundle.
Important: build the path to verifiedCards.properties dynamically using the CashMachine class's getPackage() method
2. Replace the hardcoded credit card and PIN data with a check to see whether the entered user data is in verifiedCards.properties.



CashMachine (part 11)


Congratulations! You implemented WithdrawCommand! The main functionality is finished. Next you can do some polishing and make things pretty.
Let's implement one sweet feature. We can get by without it, but it will make things more beautiful.
I'm talking about verification of the user's credit card. No, there won't be any third-party API. Just processing of data from the console.

Let's call this the LOGIN operation and make a corresponding command.
1. Add the LOGIN operation with ordinal 0
2. Prevent the user from selecting this operation from the list.
In the only method for selecting operations, use the operation's ordinal to deny access â€” throw an IllegalArgumentException.
3. Create LoginCommand by analogy with the other commands. In this command, hardcode card number and PIN code
123456789012 and 1234, respectively.
4. Implement the following logic for LoginCommand:
4.1. Until the user enters a valid card number and PIN code, perform the following actions:
4.2. Request 2 numbers from the user: a 12-digit credit card number and a 4-digit PIN code.
4.3. Display a message if the user enters invalid data.
4.4. If the data is valid, then compare them with the hardcoded values (123456789012 and 1234).
4.5. If the user enters the data specified in item 4.4, then report that the verification was successful.
4.6. If the user does NOT enter the data specified in item 4.4, then return to item 4.1.
5. Fix CommandExecutor. Add the new operation to allKnownCommandsMap.
6. Fix the main method.
The LOGIN operation must be run once before any other operations are performed.
Don't forget about InterruptedOperationExceptions anywhere the user can stop working with the ATM. So, call the operation inside a try-catch block.



CashMachine (part 10)


Today we'll tackle WithdrawCommand. It's the most complex operation.

1. Implement the following algorithm for WithdrawCommand:
1.1. Read the currency code (the method already exists).
1.2. Get a manipulator for the specified currency.
1.3. Until the user enters valid data, do the following:
1.3.1. Ask the user to enter the amount.
1.3.2. If invalid data is entered, inform the user and return to item 1.3.
1.3.3. Check whether there's enough money in the account.
To do this, create a boolean isAmountAvailable(int expectedAmount) method in the manipulator. It should return true if there is enough money to make the withdrawal.
If there is not enough, then return to item 1.3.
1.3.4. Deduct the money from the account. To do this, in the manipulator class, create a
Map<Integer, Integer> withdrawAmount(int expectedAmount) that returns a Map<denomination, quantity>.
For details on the logic of this method, see item 2.
1.3.5. Display the result from item 1.3.4. in the following form:
<tab><denomination> - <quantity>.
The lines should be sorted from larger denominations to smaller ones.
Display a message that the transaction was successful.
1.3.6. Catch InsufficientFundsExceptions, notify the user about the insufficient banknotes, and return to item 1.3.

2. Here's the logic for the withdrawAmount method:
2.1. Please note that the withdrawAmount method should return the smallest number of banknotes that can be used to provide the requested amount.
Use a greedy algorithm (google it).
If there are several options, then use the one that has the largest number of banknotes of the highest denomination.
If the result is three banknotes for a withdrawal amount of 600, i.e. 500 50 50 = 200 200 200, then issue banknotes according to the first option.
Suppose you need to issue 600.
The manipulator has the following banknotes:
500 - 2
200 - 3
100 - 1
50 - 12
The issued banknotes should be:
500 - 1
100 - 1
i.e. only two banknotes (this is the minimum number of banknotes) with the denominations 500 and 100.

2.2. We can't issue the same banknotes more than once, so
if we find a valid option for issuing the money (item 2.1 is successful), then remove all these notes from the map in the manipulator.

2.3. The withdrawAmount method should throw an InsufficientFundsException if it is impossible to issue the requested amount.
Suppose you need to issue 600.
The manipulator has the following banknotes:
500 - 2
200 - 2
The available banknotes cannot provide the requested amount. Throw an exception.
Don't forget that maps sometimes throw ConcurrentModificationExceptions.



