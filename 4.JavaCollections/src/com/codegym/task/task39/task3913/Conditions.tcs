taskKey="com.codegym.task.task39.task3913.big08"\n\nLog parser (part 8)


You've implemented a log parser that reads from different files.

In addition to the parser, you also implemented your own query language. We need it in order to minimize
the number of methods. A line in our log file contained a total of 5 parameters plus one optional parameter.
If a query has two parameters, then there are 25 possible combinations. This means that choosing any two of them
would require us to implement 25 methods. Now imagine that the lines of the log file have not 5 parameters, but 10. And
that the number of query parameters is not 2, but 3. In this case, we would need 10 * 10 * 10 = 1000 methods.
The more complex the log, the more time a developer can save.

One of the possible improvements you could make would be to implement support for a query with the number of parameters, e.g. 3:
get field1 for field2 = "value1" and field3 = "value2" and date between "after"
and "before"

Architecturally speaking, it would be appropriate to improve the program by using the command pattern (to get the field values
in a consistent manner). Implement it if you haven't done so already.


Requirements:
1.	Congratulations! You wrote your own parser and your own query language!


Log parser (part 7)


Now give our query language support for an additional query parameter.
The additional parameter will be responsible for the range of dates we are interested in.
Example query: get ip for user = "Eduard Bentley" and date between
"11.12.2013 0:00:00" and "03.01.2014 23:59:59".
Expected result: Set<String> with the following entries: 127.0.0.1 and 146.34.15.5.

Here's the general format for a query:
get field1 for field2 = "value1" and date between "after" and "before"
The additional parameter can only be the range of dates we are interested in.

You must maintain support for the old query format.



Log parser (part 6)


Let's add support for query parameters to our query language.
Examples of queries with parameters:
1) get ip for user = "Jack"
2)	get user for event = "COMPLETE_TASK"
3)	get event for date = "03.01.2014 03:45:23"
General format for a query with parameters:
get field1 for field2 = "value1"
where: field1 is one of the following fields: ip, user, date, event, or status;
field2 is one of the following fields: ip, user, date, event, or status;
value1 is the value of field2.

Here's the algorithm for processing a query: we look at the entries in the log; if
the value of field2 is equal to value1, then we add field1 to the set that will
be returned by the execute method.

Example: A call to execute("get event for date = \"30.01.2014 12:56:22\"") should
return a Set<Event< containing only one ATTEMPT_TASK event. Don't return
the specific task that was attempted.

You must maintain support for the old query format.



Log parser (part 5)


As you noticed, there are a huge number of combinations of parameter to choose from for selecting
specific records from a log file. Cover them all with appropriate methods.
It's thankless work.  So, we'll implement our own query language (QL).
Example query:
get ip for user = "Jack"
This query should return all the IP addresses from which user Jack did anything,
and we should see the result in our log.
Imagine how convenient it is to enter a query on the console and get the
information you need from a log.

5.1.	Implement the QLQuery interface in the LogParser class. The execute() method should only
support the following queries:
5.1.1.	get ip
5.1.2.	get user
5.1.3.	get date
5.1.4.	get event
5.1.5.	get status

Example: A call to execute("get ip") must return a Set<String> containing all
the unique IP addresses in the log (i.e. 127.0.0.1, 12.12.12.12, 146.34.15.5, 192.168.100.2
for the test file). The other queries should work in a similar manner.

The objects in the returned set must be Strings for ip and user queries,
Dates for date queries, Events for event queries, and Statuses for status queries.



Log parser (part 4)


Implement the EventQuery interface in the LogParser class:
4.1.	The getNumberOfEvents() method must return the number of events in the specified period.
4.2.	The getAllEvents() method must return all events in the specified period.
4.3.	The getEventsForIP() method must return the events generated by the specified IP.
4.4.	The getEventsForUser() method must return the events generated
by a specific user.
4.5.	The getFailedEvents() method must return the events that did not finish.
4.6.	The getErrorEvents() method must return the events that resulted in an error.
4.7.	The getNumberOfAttemptsToCompleteTask() method must return the number of attempts
to complete the specified task.
4.8.	The getNumberOfSuccessfulAttemptsToCompleteTask() method must return the number
of successful solutions to the specified task.
4.9.	The getAllAttemptedTasksAndNumberOfAttempts() method must return a (task_number,
number of attempts) map.
4.10.	The getAllCompletedTasksAndNumberOfCompletions() method must return a (task number,
number of completions) map.



Log parser (part 3)


Implement the DateQuery interface in the LogParser class:
3.1.	The getDatesForUserAndEvent() method must return the dates when a specific
user generated a specific event.
3.2.	The getDatesWhenSomethingFailed() method must return the dates when
any event failed (FAILED status).
3.3.	The getDatesWhenErrorOccurred() method must return the dates when
any event ended in an error (ERROR status).
3.4.	The getDateWhenUserLoggedInFirstTime() method must return the date when
the user logged in for the first time in the specified period. If there is no such date in the logs, return null.
3.5.	The getDateWhenUserAttemptedTask() method must return the date when the user
first attempted to completed the specified task. If there is no such date in the logs, return null.
3.6.	The getDateWhenUserCompletedTask() method must return the date when the user
first completed the specified task. If there is no such date in the logs, return null.
3.7.	The getDatesWhenUserSentMessages() method must return the dates when the
user sent a message.
3.8.	The getDatesWhenUserDownloadedPlugin() method must return the dates when the
user downloaded the plugin.



