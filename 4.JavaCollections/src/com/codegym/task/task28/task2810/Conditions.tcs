taskKey="com.codegym.task.task28.task2810.big13"\n\nAggregator (part 13)


Check it out â€” there are two new files in the view package:
jobPostings.html (you will write data here),
backup.html (a copy of jobPostings.html for data recovery if the data in jobPostings.html is erased somehow).

Hover over and right-click jobPostings.html in the project tree on the left. Then click "Open in Browser".
This way you will see the result of your parsing.

It's time to display the job postings.
1. In the HtmlView class's update method, implement the following:
1.1. create a new body for jobPostings.html, which will hold the job postings,
1.2. write the updated body to the jobPostings.html file,
1.3. All exceptions must be handled in this method. Display a stack trace if an exception occurs.

2. To implement item 1, create two empty private methods:
String getUpdatedFileContents(List<JobPosting>) and void updateFile(String),
We will implement them in future tasks.

3. To get to the jobPostings.html file, create a relative path to it.
In the HtmlView class, create a private final String filePath field and assign it the relative path to jobPostings.html.
The path must be relative to the project's root.
Create the path dynamically using this.getClass().GetPackage() and the "/" separator.
Hint: the path must begin with "./".


Requirements:
1.	In the HtmlView class, create an empty private String getUpdatedFileContents(List&lt;JobPosting&gt;) method.
2.	In the HtmlView class, create an empty private void updateFile(String) method.
3.	Using the created methods, implement the update method in accordance with the task conditions.
4.	In the HtmlView class, create a private final String filePath field and assign it the relative path to jobPostings.html.


Aggregator (part 12)


To run the application, you need to emulate a user event:
1. In the HtmlView class, create a public void emulateCitySelection() method.
Let this method call the controller using the city "Odessa".

2. To check whether everything is working, display something on the console in the HtmlView's update method, for example, the number of job postings.
This is an indication that you can move on.

3. To get started, you need to update Aggregator's main method.
3.1. Create a view, model, and controller.
3.2. Pass the controller to the view.
3.3. Call the view's emulateCitySelection method.

4. Run the application! Wait a few seconds to get the data.
Did it work? Great! It works!



Aggregator (part 11)


Model has a selectCity method to which the name of the city for the job search is passed.
Obviously, this method will be called by the controller, since it decides which model to use.

1. Add a new Model model field to the Controller.

2. Remove the scan() method from the Controller. Its logic has been moved to the model.

3. Remove the constructor, toString method, and providers field from the controller.

4. Create a Controller constructor with a Model parameter.
Throw an IllegalArgumentException for invalid data

5. Create a public void onCitySelected(String cityName) method in Controller, in which we will call the appropriate method on the model.

6. Remove the code from the main method. This code is no longer valid.



Aggregator (part 10)


View has an update method. The list of job postings is passed to it to be displayed.
Obviously, only the model will call this method, since only the model gets the data.
It's time to create the model.

1. Create a Model class in the model package.

2. Add two fields: 1) a view, 2) an array of providers.

3. Create a constructor with two parameters: 1) a view, 2) an array of providers.
Throw an IllegalArgumentException if invalid data is passed.

4. Create a public void selectCity(String city) method.

5. Implement the selectCity method:
5.1. get job postings from each provider,
5.2. update the view with the list of job postings from item 5.1.



Aggregator (part 9)


It's time to refactor the code a little.
Read about the Model-View-Controller (MVC) pattern on the Internet.
In short, the user uses the view to generate events that are processed by the controller.
The controller decides what data it needs, and accesses the correct model.
The model gets data, for example, from a database or a URL. Then the model passes the data to the view.
The view then displays the data.

1. Create a view package and create a View interface with two methods in it:
void update(List<JobPosting> jobPostings);
void setController(Controller controller);

2. In the view package, create an HtmlView class that implements View.

3. In the HtmlView class, create a controller field and use it to implement one of the interface's methods.



Aggregator (part 8)


Run the program in debug mode again.
Copy the value of document.html() into the HTML file we created earlier.
Format it and find the tags with job postings.

Read additional lesson material about attribute selectors in the Community.

PLEASE NOTE THIS SPECIAL RULE FOR TESTING THIS TASK!
The HTML code on the Linkedin page might change. To allow this task to work consistently without requiring us to change the tests,
use the cached version at http://codegym.cc/testdata/big28data.html
This is only for this item. Use real pages in subsequent tasks.

1. In the LinkedinStrategy class, create a protected Document getDocument(String searchString, int page) throws IOException method.

2. Implement the following logic in the LinkedinStrategy class's getJobPostings method:
2.1. Use the getDocument method to fetch the cached Linkedin page. The numbering starts with 0.
2.2. Get the list of elements with the "jobs-search-result-item" class. There should be up to 25 job postings per page.
2.3. If there is data in the list from step 2.2, then for each element:
2.3.1. create a JobPosting and set all its fields using data from the current element.
2.4. Repeat items 2.1-2.3 for the next Linkedin page.
2.5. When there are no more pages of job postings, exit the loop.

Ignore exceptions.
Add all job postings to a single list and return it.



